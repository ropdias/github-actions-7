name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/README.md' # This will ignore all pushs that changes only the README.md
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # container: # this job will run inside a container
    #   image: node:16
    #   # env: # we can add env variables the image might need to run
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb # you should use just mongodb here if you are using an image of the mongodb
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017 # since we are not using a container anymore we need to use this ip and port to connect to the service
      MONGODB_USERNAME: root # ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: example # ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080
    services: # container services that this job will have, they won't run in the runner itself, always inside images
      mongodb: # you can specify any name to the service, this will be a label for a connection address
        image: mongo
        ports: # If we are not running this job inside a container we should forward the internal port to that port in the runner machine
          - 27017:27017
        env: # some images needs some env variables
          # the variables below doenst need to be complex for this case because
          # this is only a test database that will run as long as our workflow is running
          MONGO_INITDB_ROOT_USERNAME: root # Should be the same as the env variable for the job MONGODB_USERNAME
          MONGO_INITDB_ROOT_PASSWORD: example # Should be the same as the env variable for the job MONGODB_PASSWORD
      # another-service: ...
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
